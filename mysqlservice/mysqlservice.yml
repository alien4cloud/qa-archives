tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: MysqlService
  template_version: 0.1.0-SNAPSHOT
  template_author: admin

description: ""

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - mysql-type:1.4.0-SNAPSHOT

topology_template:
  inputs:
    db_user:
      type: string
      required: true
      default: pass
      description: "The special user account used for database administration."
    name:
      type: string
      required: true
      default: wordpress
      description: "The logical name of the database."
    db_password:
      type: string
      required: true
      default: pass
      description: "The password associated with the user account provided in the ‘db_user’ property."
    port:
      type: integer
      required: true
      default: 3306
      description: "The port on which the underlying database service will listen to data."
  substitution_mappings:
    node_type: org.alien4cloud.nodes.AbstractMysql
    capabilities:
      database_endpoint: [ Mysql, database_endpoint ]
  node_templates:
    Compute:
      type: tosca.nodes.Compute
      capabilities:
        os:
          properties:
            architecture: "x86_64"
            type: linux
            distribution: ubuntu
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    Mysql:
      type: org.alien4cloud.nodes.Mysql
      properties:
        port: { get_input: port }
        name: { get_input: name }
        db_user: { get_input: db_user }
        db_password: { get_input: db_password }
        bind_address: true
        storage_path: "/mountedStorage"
      requirements:
        - host:
            node: QA_Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        database_endpoint:
          properties:
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
  outputs:
    Mysql_port:
      value: { get_property: [ Mysql, port ] }
    Mysql_db_user:
      value: { get_property: [ Mysql, db_user ] }
    Mysql_name:
      value: { get_property: [ Mysql, name ] }
    Mysql_db_password:
      value: { get_property: [ Mysql, db_password ] }
  workflows:
    install:
      steps:
        Compute_install:
          node: QA_Compute
          activity:
            delegate: install
          on-success:
            - Mysql_initial
        Mysql_initial:
          node: Mysql
          activity:
            set_state: initial
          on-success:
            - Mysql_creating
        Mysql_creating:
          node: Mysql
          activity:
            set_state: creating
          on-success:
            - create_Mysql
        create_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.create
          on-success:
            - Mysql_created
        Mysql_created:
          node: Mysql
          activity:
            set_state: created
          on-success:
            - Mysql_configuring
        Mysql_configuring:
          node: Mysql
          activity:
            set_state: configuring
          on-success:
            - configure_Mysql
        configure_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.configure
          on-success:
            - Mysql_configured
        Mysql_configured:
          node: Mysql
          activity:
            set_state: configured
          on-success:
            - Mysql_starting
        Mysql_starting:
          node: Mysql
          activity:
            set_state: starting
          on-success:
            - start_Mysql
        start_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - Mysql_started
        Mysql_started:
          node: Mysql
          activity:
            set_state: started
    uninstall:
      steps:
        Compute_uninstall:
          node: QA_Compute
          activity:
            delegate: uninstall
        Mysql_stopping:
          node: Mysql
          activity:
            set_state: stopping
          on-success:
            - stop_Mysql
        stop_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - Mysql_stopped
        Mysql_stopped:
          node: Mysql
          activity:
            set_state: stopped
          on-success:
            - Mysql_deleting
        Mysql_deleting:
          node: Mysql
          activity:
            set_state: deleting
          on-success:
            - delete_Mysql
        delete_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.delete
          on-success:
            - Mysql_deleted
        Mysql_deleted:
          node: Mysql
          activity:
            set_state: deleted
          on-success:
            - Compute_uninstall
    start:
      steps:
        Compute_start:
          node: QA_Compute
          activity:
            delegate: start
          on-success:
            - Mysql_starting
        Mysql_starting:
          node: Mysql
          activity:
            set_state: starting
          on-success:
            - start_Mysql
        start_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.start
          on-success:
            - Mysql_started
        Mysql_started:
          node: Mysql
          activity:
            set_state: started
    stop:
      steps:
        Compute_stop:
          node: QA_Compute
          activity:
            delegate: stop
        Mysql_stopping:
          node: Mysql
          activity:
            set_state: stopping
          on-success:
            - stop_Mysql
        stop_Mysql:
          node: Mysql
          activity:
            call_operation: tosca.interfaces.node.lifecycle.Standard.stop
          on-success:
            - Mysql_stopped
        Mysql_stopped:
          node: Mysql
          activity:
            set_state: stopped
          on-success:
            - Compute_stop
